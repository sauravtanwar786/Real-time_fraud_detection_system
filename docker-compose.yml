version: '3.8'

services:
  trino:
    image: trinodb/trino:442
    container_name: trino
    ports:
      - "8080:8080"
    volumes:
      - ./trino-config/catalog:/etc/trino/catalog
    depends_on:
      - nessie

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9093:9093"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  connect:
    build:
      context: ./connect
      dockerfile: Dockerfile
    container_name: connect
    hostname: connect
    ports:
      - "8083:8083"
    environment:
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my-connect-configs
      - OFFSET_STORAGE_TOPIC=my-connect-offsets
      - BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - zookeeper
      - kafka

  nessie:
    image: projectnessie/nessie:latest
    container_name: nessie
    ports:
      - 19120:19120
    environment:
      - nessie.version.store.type=IN_MEMORY
      - nessie.catalog.default-warehouse=warehouse
      - nessie.catalog.warehouses.warehouse.location=s3://commerce/warehouse
      - nessie.catalog.service.s3.default-options.endpoint=http://minio:9000/
      - nessie.catalog.service.s3.default-options.access-key=urn:nessie-secret:quarkus:nessie.catalog.secrets.access-key
      - nessie.catalog.service.s3.default-options.path-style-access=true
      - nessie.catalog.secrets.access-key.name=minio
      - nessie.catalog.secrets.access-key.secret=minio123
      - nessie.catalog.service.s3.default-options.region=us-east-1
      - nessie.server.authentication.enabled=false

  minio:
    image: quay.io/minio/minio:RELEASE.2022-05-26T05-48-41Z
    hostname: minio
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server --console-address ":9001" /data
    volumes:
      - ./volume/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 5

  createbuckets:
    image: minio/mc
    container_name: createbuckets
    links:
      - minio:minio
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      /usr/bin/mc config host add myminio http://minio:9000 minio minio123 &&
      /usr/bin/mc rm -r --force myminio/commerce || true &&
      /usr/bin/mc mb myminio/commerce &&
      /usr/bin/mc policy download myminio/commerce;
      "

  pyspark:
    build:
      context: ./pyspark
      dockerfile: Dockerfile
    container_name: pyspark
    environment:
      - SPARK_DRIVER_MEMORY=12g
      - SPARK_EXECUTOR_MEMORY=12g
      - SPARK_EXECUTOR_CORES=*
    volumes:
      - ./pyspark/scripts:/opt/code/
      - ./data:/opt/data
    depends_on:
      - zookeeper
      - kafka
      - minio

  datagen:
    build:
      context: .
      dockerfile: ./datagen/Dockerfile
    container_name: datagen
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    restart: on-failure
    depends_on:
      - postgres
    entrypoint:
      - python
      - ./data_gen.py


  superset:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: superset
    restart: unless-stopped  # Ensures Superset restarts if it fails
    ports:
      - 8088:8088
    environment:
      - SUPERSET_CONFIG_PATH=/etc/superset/superset_config.py
    volumes:
      - ./volume/superset:/var/lib/superset
      - ./superset/superset_config.py:/etc/superset/superset_config.py
      - ./volume/superset_home:/app/superset_home
      - ./superset/entrypoint.sh:/entrypoint.sh
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      retries: 5

  postgres:
    image: debezium/postgres:15
    container_name: postgres
    hostname: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5

volumes:
  postgres_data:
